local verbose
if [[ $TERM == screen* ]] && [ -n "$STY" ]; then
    verbose=
else
    verbose=1
fi

coloratom() {
    local off=$1 atom=$2
    if [[ $atom[1] == [[:upper:]] ]]; then
        off=$(( $off + 60 ))
    fi
    echo $(( $off + $colorcode[${(L)atom}] ))
}

colorword() {
    local fg=$1 bg=$2 att=$3
    local -a s

    if [ -n "$fg" ]; then
        s+=$(coloratom 30 $fg)
    fi
    if [ -n "$bg" ]; then
        s+=$(coloratom 40 $bg)
    fi
    if [ -n "$att" ]; then
        s+=$attcode[$att]
    fi

    echo "%{"$'\e['${(j:;:)s}m"%}"
}

typeset -A colorcode
colorcode[black]=0
colorcode[red]=1
colorcode[green]=2
colorcode[yellow]=3
colorcode[blue]=4
colorcode[magenta]=5
colorcode[cyan]=6
colorcode[white]=7
colorcode[default]=9
colorcode[k]=$colorcode[black]
colorcode[r]=$colorcode[red]
colorcode[g]=$colorcode[green]
colorcode[y]=$colorcode[yellow]
colorcode[b]=$colorcode[blue]
colorcode[m]=$colorcode[magenta]
colorcode[c]=$colorcode[cyan]
colorcode[w]=$colorcode[white]
colorcode[.]=$colorcode[default]

typeset -A attcode
attcode[none]=00
attcode[bold]=01
attcode[faint]=02
attcode[standout]=03
attcode[underline]=04
attcode[blink]=05
attcode[reverse]=07
attcode[conceal]=08
attcode[normal]=22
attcode[no-standout]=23
attcode[no-underline]=24
attcode[no-blink]=25
attcode[no-reverse]=27
attcode[no-conceal]=28

local -A pc
pc[divider]='black'
pc[default]='default'
pc[date]='cyan'
pc[time]='Blue'
pc[host]='Green'
pc[user]='cyan'
pc[punc]='yellow'
pc[line]='magenta'
pc[hist]='green'
pc[path]='Cyan'
pc[shortpath]='default'
pc[rc]='red'
pc[scm_branch]='green'
pc[scm_commitid]='Yellow'
pc[scm_status_dirty]='Red'
pc[scm_status_staged]='Green'
pc[scm_time_short]='green'
pc[scm_time_medium]='yellow'
pc[scm_time_long]='red'
pc[scm_time_uncommitted]='Magenta'
pc[#]='Yellow'
for cn in ${(k)pc}; do
    pc[${cn}]=$(colorword $pc[$cn])
done

pc[reset]=$(colorword . . 00)

typeset -Ag lm_prompt_colors
lm_prompt_colors=(${(kv)pc})

autoload -U vcs_info
zstyle ':vcs_info:*' enable git hg
zstyle ':vcs_info:(hg*|git*):*' check-for-changes true
zstyle ':svc_info:hg*:*' get-bookmarks true
zstyle ':vcs_info:*' formats "(%m$pc[punc]%F%s$pc[reset]|$pc[scm_branch]%b%u$pc[reset])"
zstyle ':vcs_info:*' branchformat '%b-%r'
zstyle ':vcs_info:hg*:*' branchformat '%b'
zstyle ':vcs_info:(git*|hg*):*' stagedstr '+'
zstyle ':vcs_info:(git*|hg*):*' unstagedstr "$pc[scm_status_dirty]!"
zstyle ':vcs_info:git*+set-message:*' hooks git-time-since
zstyle ':vcs_info:hg*+set-message:*' hooks hg-time-since
# zstyle ':vcs_info:*+*:*' debug true

function minutes_since_last_commit() {
    local now=`date +%s`
    if [ -n $last_commit ]; then
        seconds_since_last_commit=$((now-last_commit))
        minutes_since_last_commit=$((seconds_since_last_commit/60))
    else
        minutes_since_last_commit="-1"
    fi

    echo $minutes_since_last_commit
}

function prompt_lm_scm_time_since_commit() {
    local -A pc
    pc=(${(kv)lm_prompt_colors})

    local MINUTES_SINCE_LAST_COMMIT=`minutes_since_last_commit`
    if [ "$MINUTES_SINCE_LAST_COMMIT" -eq -1 ]; then
        COLOR="$pc[scm_time_uncommitted]"
        local SINCE_LAST_COMMIT="${COLOR}uncommitted$pc[reset]"
    else
        if [ "$MINUTES_SINCE_LAST_COMMIT" -gt 30 ]; then
            COLOR="$pc[scm_time_long]"
        elif [ "$MINUTES_SINCE_LAST_COMMIT" -gt 10 ]; then
            COLOR="$pc[scm_time_medium]"
        else
            COLOR="$pc[scm_time_short]"
        fi
        local SINCE_LAST_COMMIT="${COLOR}`minutes_since_last_commit`m$pc[reset]"
    fi
    echo $SINCE_LAST_COMMIT
}

# hg: Time since last commit
+vi-hg-time-since() {
    last_commit="`echo $(command hg log --template '{date}' -l 1 2>&1)`"
    last_commit=${last_commit%.*}

    # jam time-since in front of branch
    hook_com[vcs]=$(prompt_lm_scm_time_since_commit)
}

# git: Time since last commit
+vi-git-time-since() {
    last_commit="`echo $(command git log --pretty=format:'%at' -1 2>&1)`"

    hook_com[vcs]=$(prompt_lm_scm_time_since_commit)
}

+vi-git-check-untracked() {
    local x
    [[ -n $(git ls-files --others --exclude-standard 2>&-) ]] && x=\?
    local desc
    desc="`git log -1 --pretty=format:'%s | %ar | %h' 2>&-`"
    hook_com[unstaged]="${hook_com[unstaged]}%{%F{1}%}$x %{%F{$VCS_DESC_COLOR}%}$desc"
}

precmd() vcs_info
setopt promptsubst

PROMPT="$pc[reset]"
    PROMPT+=
        if [ $verbose ]; then
            PROMPT+="$pc[host]%m$pc[reset]"
        fi
    PROMPT+=":$pc[shortpath]%1~$pc[reset]"
    PROMPT+="\${vcs_info_msg_0_}"
    PROMPT+=" $pc[#]\$$pc[reset] "

export PROMPT RPROMPT
# vim:ft=zsh
